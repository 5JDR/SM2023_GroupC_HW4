gam_fit <- gam(accel ~ s(time, k = 30 + i), method = "GCV.Cp", data = df)
RMSE[i] <- mean(gam_fit$residuals^2)
}
library(MASS)
library(mgcv)
data(mcycle)
# If we don't do this mcycle is a closure
df <- as.data.frame(matrix(c(mcycle$accel, mcycle$time), ncol = 2))
names(df) <- c("accel", "time")
plot(df$time, df$accel)
RMSE <- rep(0, 11)
for (i in 1:11){s
gam_fit <- gam(accel ~ s(time), method = "GCV.Cp", data = df)
RMSE[i] <- mean(gam_fit$residuals^2)
}
plot(30:40, RMSE, type = "o", xlab = "k", ylab = "RMSE")
abline(v = 30 + which.min(RMSE) - 1, col = "red")
RMSE <- rep(0, 11)
for (i in 1:11){s
gam_fit <- gam(accel ~ s(time), method = "GCV.Cp", data = df)
RMSE[i] <- mean(gam_fit$residuals^2)
}
plot(30:40, RMSE, type = "o", xlab = "k", ylab = "RMSE")
abline(v = 30 + which.min(RMSE) - 1, col = "red")
RMSE <- rep(0, 11)
for (i in 1:11){s
gam_fit <- gam(accel ~ s(time), method = "GCV.Cp", k=30 + i, data = df)
RMSE[i] <- mean(gam_fit$residuals^2)
}
RMSE <- rep(0, 11)
for (i in 1:11){s
gam_fit <- gam(accel ~ s(time), method = "GCV.Cp", data = df)
RMSE[i] <- mean(gam_fit$residuals^2)
}
plot(30:40, RMSE, type = "o", xlab = "k", ylab = "RMSE")
abline(v = 30 + which.min(RMSE) - 1, col = "red")
summary(gam_fit)
fit_1 <- gam(accel ~ s(time), method = "GCV.Cp", data = df)
fit_2 <- gam(accel ~ s(time, k=10), data = df)
fit_2 <- gam(accel ~ s(time, k=10), data = df)
summary(fit_2)
fit_2 <- gam(accel ~ s(time, k=30), data = df)
summary(fit_2)
RMSE <- rep(0, 11)
for (i in 1:11){s
gam_fit <- gam(accel ~ s(time, k = i+30), data = df)
RMSE[i] <- mean(gam_fit$residuals^2)
}
plot(30:40, RMSE, type = "o", xlab = "k", ylab = "RMSE")
abline(v = 30 + which.min(RMSE) - 1, col = "red")
?gam
RMSE <- rep(0, 11)
for (i in 1:11){s
gam_fit <- gam(accel ~ s(time, k = i+30), data = df)
RMSE[i] <- mean(gam_fit$residuals^2)
}
plot(30:40, RMSE, type = "o", xlab = "k", ylab = "RMSE")
abline(v = 30 + which.min(RMSE) - 1, col = "red")
fit_1 <- gam_fit <- gam(accel ~ s(time, k = 30+which.min(RMSE)-1), method = "GCV.Cp", data = df)
plot(fit_1, residuals = TRUE, se = FALSE)
fit_2 <- lm(accel ~ poly(time, 30 + which.min(RMSE)-1), data = df)
summary(fit_1)
fit_2 <- lm(accel ~ poly(time, 11), data = df)
termplot(fit_2, partial.resid = TRUE, se = FALSE)
summary(fit_1)$edf
round(summary(fit_1)$edf)
fit_2 <- lm(accel ~ poly(time, round(summary(fit_1)$edf)), data = df)
termplot(fit_2, partial.resid = TRUE, se = FALSE)
## Is sp the penalization parameter?
## Basis dim updated by k, what do we have to set?
fit_3 <- gam(mcycle$accel ~ s(mcycle$time, k = 30+which.min(RMSE)-1), method = "GCV.Cp", sp=0)
plot(fit_3, residuals = TRUE, se = FALSE)
summary(fit_3)
## Is sp the penalization parameter?
## Basis dim updated by k, what do we have to set?
fit_3 <- gam(mcycle$accel ~ s(mcycle$time, k = 10), method = "GCV.Cp", sp=0)
plot(fit_3, residuals = TRUE, se = FALSE)
summary(fit_3))
summary(fit_3)
## Is sp the penalization parameter?
## Basis dim updated by k, what do we have to set?
fit_3 <- gam(mcycle$accel ~ s(mcycle$time, k = 12), method = "GCV.Cp", sp=0)
summary(fit_3)
plot(fit_3, residuals = TRUE, se = FALSE)
## Is bs="cc" the cubic spline?
fit_4 <- gam(mcycle$accel ~ s(mcycle$time, k = 30+which.min(RMSE)-1, bs="cc"), method = "GCV.Cp", sp=0)
plot(fit_4, residuals = TRUE, se = FALSE)
## Is sp the penalization parameter?
## Basis dim updated by k, what do we have to set?
fit_3 <- gam(mcycle$accel ~ ts(mcycle$time, k = 12), method = "GCV.Cp", sp=0)
## Is sp the penalization parameter?
## Basis dim updated by k, what do we have to set?
fit_3 <- gam(mcycle$accel ~ ts(mcycle$time, k = 12), sp=0)
## Is sp the penalization parameter?
## Basis dim updated by k, what do we have to set?
fit_3 <- gam(mcycle$accel ~ ts(mcycle$time), sp=0)
## Is sp the penalization parameter?
## Basis dim updated by k, what do we have to set?
fit_3 <- gam(mcycle$accel ~ ts(mcycle$time), method="GCV.Cp" sp=0)
## Is sp the penalization parameter?
## Basis dim updated by k, what do we have to set?
fit_3 <- gam(mcycle$accel ~ ts(mcycle$time), method="GCV.Cp", sp=0)
## Is sp the penalization parameter?
## Basis dim updated by k, what do we have to set?
fit_3 <- gam(accel ~ ts(time), method="GCV.Cp", sp=0, data = df)
## Is sp the penalization parameter?
## Basis dim updated by k, what do we have to set?
fit_3 <- gam(accel ~ cs(time), method="GCV.Cp", sp=0, data = df)
## Is sp the penalization parameter?
## Basis dim updated by k, what do we have to set?
fit_3 <- gam(accel ~ s(time, k = 12), method="GCV.Cp", sp=0, data = df)
plot(fit_3, residuals = TRUE, se = FALSE)
summary(fit_3)
## Is bs="cc" the cubic spline?
fit_4 <- gam(accel ~ s(time, k = 30+which.min(RMSE)-1), method = "GCV.Cp", sp=0, data=df)
## Is bs="cc" the cubic spline?
fit_4 <- gam(accel ~ s(time, k = 12), method = "GCV.Cp", sp=0, data=df)
plot(fit_4, residuals = TRUE, se = FALSE)
## Is bs="cc" the cubic spline?
fit_4 <- gam(accel ~ s(time, k = 12), bc="cc", method = "GCV.Cp", sp=0, data=df)
plot(fit_4, residuals = TRUE, se = FALSE)
?gam
?s
?s
## Is bs="cc" the cubic spline?
fit_4 <- gam(accel ~ s(time, k = 12, bs="cr"), method = "GCV.Cp", sp=0, data=df)
plot(fit_4, residuals = TRUE, se = FALSE)
summary(fit_4)
## Is bs="cc" the cubic spline?
fit_4 <- gam(accel ~ s(time, k = 12, bs="cr"), method = "GCV.Cp", sp=0, data=df)
plot(fit_4, residuals = TRUE, se = FALSE)
## Is sp the penalization parameter?
## Basis dim updated by k, what do we have to set?
fit_3 <- gam(accel ~ s(time, k = 12), method="GCV.Cp", sp=0, data = df)
plot(fit_3, residuals = TRUE, se = FALSE)
summary(fit_4)
summary(fit_3)
summary(fit_2)
summary(fit_1)
# It looks heteroskedastic
plot(df$time, fit_4$residuals)
# It looks heteroskedastic
par(mfrow=c(2,2))
plot(df$time, fit_1$residuals)
plot(df$time, fit_2$residuals)
plot(df$time, fit_3$residuals)
plot(df$time, fit_4$residuals)
## I choosed the points by looking at the plot changes of direction
fit_5 <- lm(accel ~ bs(time, knots=c(15, 21, 33, 43)), data = df)
?bs
## I choosed the points by looking at the plot changes of direction
fit_5 <- lm(accel ~ bs(time, knots=c(15, 21, 33, 43)), data = df)
library(splines)
## I choosed the points by looking at the plot changes of direction
fit_5 <- lm(accel ~ bs(time, knots=c(15, 21, 33, 43)), data = df)
termplot(fit_5,  partial.resid = TRUE, se = FALSE)
abline(v = c(15, 21, 33, 43), col = "blue")
library(splines)
## I choosed the points by looking at the plot changes of direction
fit_5 <- lm(accel ~ bs(time, knots=c(15, 21, 33, 43)), data = df)
termplot(fit_5,  partial.resid = TRUE, se = FALSE)
abline(v = c(15, 21, 33, 43), col = "blue")
fit_6 <- lm(accel ~ bs(time, knots=knots_1), data = df)
knots_1 <- seq(2, 55, 2)
fit_6 <- lm(accel ~ bs(time, knots=knots_1), data = df)
knots_1 <- seq(2, 55, 2)
fit_6 <- lm(accel ~ bs(time, knots=knots_1), data = df)
termplot(fit_6,  partial.resid = TRUE, se = FALSE)
abline(v = knots_1, col = "blue")
knots_1 <- c(seq(min(df$time), 32, 2), seq(34, max(df$time), 5))
fit_6 <- lm(accel ~ bs(time, knots=knots_1), data = df)
termplot(fit_6,  partial.resid = TRUE, se = FALSE)
abline(v = knots_1, col = "blue")
knots_1 <- c(seq(min(df$time), 32, 2), seq(34, max(df$time), 7))
fit_6 <- lm(accel ~ bs(time, knots=knots_1), data = df)
termplot(fit_6,  partial.resid = TRUE, se = FALSE)
abline(v = knots_1, col = "blue")
knots_1 <- c(seq(14, 32, 2), seq(34, max(df$time), 7))
fit_6 <- lm(accel ~ bs(time, knots=knots_1), data = df)
knots_1 <- c(seq(14, 32, 2), seq(34, max(df$time), 7))
fit_6 <- lm(accel ~ bs(time, knots=knots_1), data = df)
termplot(fit_6,  partial.resid = TRUE, se = FALSE)
abline(v = knots_1, col = "blue")
knots_1 <- c(7, seq(14, 32, 2), seq(34, max(df$time), 7))
fit_6 <- lm(accel ~ bs(time, knots=knots_1), data = df)
termplot(fit_6,  partial.resid = TRUE, se = FALSE)
abline(v = knots_1, col = "blue")
knots_1 <- c(7, seq(14, 32, 2), seq(34, max(df$time), 7))
knots_1 <- quantile(df$time, probs = seq(0, 1, 0.1))
fit_6 <- lm(accel ~ bs(time, knots=knots_1), data = df)
termplot(fit_6,  partial.resid = TRUE, se = FALSE)
abline(v = knots_1, col = "blue")
knots_1 <- c(7, seq(14, 32, 2), seq(34, max(df$time), 7))
knots_1 <- quantile(df$time, probs = seq(0, 1, 0.05))
fit_6 <- lm(accel ~ bs(time, knots=knots_1), data = df)
termplot(fit_6,  partial.resid = TRUE, se = FALSE)
abline(v = knots_1, col = "blue")
knots_1 <- c(7, seq(14, 32, 2), seq(34, max(df$time), 7))
knots_1 <- quantile(df$time, probs = seq(0, 1, 0.1))
fit_6 <- lm(accel ~ bs(time, knots=knots_1), data = df)
termplot(fit_6,  partial.resid = TRUE, se = FALSE)
abline(v = knots_1, col = "blue")
knots_1 <- c(7, seq(14, 32, 2), seq(34, max(df$time), 7))
knots_1 <- quantile(df$time, probs = seq(0.1, 0.9, 0.1))
fit_6 <- lm(accel ~ bs(time, knots=knots_1), data = df)
termplot(fit_6,  partial.resid = TRUE, se = FALSE)
abline(v = knots_1, col = "blue")
?bs
?lm
knots_1 <- c(7, seq(14, 32, 2), seq(34, max(df$time), 7))
knots_1 <- quantile(df$time, probs = seq(0.1, 0.9, 0.1))
fit_6 <- ?lm(accel ~ ?bs(time, knots=knots_1), data = df, )
termplot(fit_6,  partial.resid = TRUE, se = FALSE)
knots_1 <- c(7, seq(14, 32, 2), seq(34, max(df$time), 7))
knots_1 <- quantile(df$time, probs = seq(0.1, 0.9, 0.1))
fit_6 <- lm(accel ~ ?bs(time, knots=knots_1), data = df, )
knots_1 <- c(7, seq(14, 32, 2), seq(34, max(df$time), 7))
knots_1 <- quantile(df$time, probs = seq(0.1, 0.9, 0.1))
fit_6 <- lm(accel ~ bs(time, knots=knots_1), data = df, )
termplot(fit_6,  partial.resid = TRUE, se = FALSE)
abline(v = knots_1, col = "blue")
knots_1 <- c(7, seq(14, 32, 2), seq(34, max(df$time), 7))
knots_1 <- quantile(df$time, probs = c(seq(0.1, 0.9, 0.1), 55))
knots_1 <- c(7, seq(14, 32, 2), seq(34, max(df$time), 7))
knots_1 <- c(quantile(df$time, probs = seq(0.1, 0.9, 0.1)), 55)
fit_6 <- lm(accel ~ bs(time, knots=knots_1), data = df, )
termplot(fit_6,  partial.resid = TRUE, se = FALSE)
abline(v = knots_1, col = "blue")
# It looks heteroskedastic
# Similar
# small time, irregularities, less variance
# 1st best
par(mfrow=c(2,2))
plot(df$time, fit_1$residuals)
plot(df$time, fit_2$residuals)
plot(df$time, fit_3$residuals)
plot(df$time, fit_4$residuals)
# It looks heteroskedastic
# Similar
# small time, irregularities, less variance
# 1st best
par(mfrow=c(2,2))
plot(df$time, fit_1$residuals)
plot(df$time, fit_2$residuals)
plot(df$time, fit_3$residuals)
plot(df$time, fit_4$residuals)
# It looks heteroskedastic
# Similar
# small time, irregularities, less variance
# 1st best
par(mfrow=c(2,2))
plot(df$time, fit_1$residuals)
plot(df$time, fit_2$residuals)
plot(df$time, fit_3$residuals)
plot(df$time, fit_4$residuals)
AIC(fit_1)
BIC(fit_1)
summary(fi1_1)$r.squared
summary(fit_1)$r.squared
summary(fit_1)$r.sq
summary(fit_1)$r.sq.adj
summary(fit_1)$r.sq.adj
summary(fit_1)$r.sq
sum <- summary(fit_1)
sum
sum$dev.expl
matrix(c(fit_1$dev.expl, fit_2$dev.expl, fit_3$dev.expl, fit_4$dev.expl), ncol = 1)
?matrix
df2 <- data.frame("model" = c("gam", "poly", "gam", "gam", "bs"),
"dev_explained" = c(summary(fit_1)$dev.expl, summary(fit_2)$r.squared, summary(fit_3)$dev.expl, summary(fit_4)$dev.expl, summary(fit_6)$r.squared),
"AIC" = c(AIC(fit_1), AIC(fit_2), AIC(fit_3), AIC(fit_4), AIC(fit_6)),
"BIC" = c(BIC(fit_1), BIC(fit_2), BIC(fit_3), BIC(fit_4), BIC(fit_6)))
df2
table(df2)
df2
df2 <- data.frame("model" = seq(1, 5),
"dev_explained" = c(summary(fit_1)$dev.expl, summary(fit_2)$r.squared, summary(fit_3)$dev.expl, summary(fit_4)$dev.expl, summary(fit_6)$r.squared),
"AIC" = c(AIC(fit_1), AIC(fit_2), AIC(fit_3), AIC(fit_4), AIC(fit_6)),
"BIC" = c(BIC(fit_1), BIC(fit_2), BIC(fit_3), BIC(fit_4), BIC(fit_6)))
df2
knots_1 <- c(7, seq(14, 32, 2), seq(34, max(df$time), 7))
knots_1 <- c(quantile(df$time, probs = seq(0.1, 0.9, 0.1)), 55)
fit_5 <- lm(accel ~ bs(time, knots=knots_1), data = df, )
termplot(fit_5,  partial.resid = TRUE, se = FALSE)
abline(v = knots_1, col = "blue")
df2 <- data.frame("model" = seq(1, 5),
"dev_explained" = c(summary(fit_1)$dev.expl, summary(fit_2)$r.squared, summary(fit_3)$dev.expl, summary(fit_4)$dev.expl, summary(fit_6)$r.squared),
"AIC" = c(AIC(fit_1), AIC(fit_2), AIC(fit_3), AIC(fit_4), AIC(fit_5)),
"BIC" = c(BIC(fit_1), BIC(fit_2), BIC(fit_3), BIC(fit_4), BIC(fit_5)))
df2
df2 <- data.frame("model" = seq(1, 5),
"dev_explained" = c(summary(fit_1)$dev.expl, summary(fit_2)$r.squared, summary(fit_3)$dev.expl, summary(fit_4)$dev.expl, summary(fit_5)$r.squared),
"AIC" = c(AIC(fit_1), AIC(fit_2), AIC(fit_3), AIC(fit_4), AIC(fit_5)),
"BIC" = c(BIC(fit_1), BIC(fit_2), BIC(fit_3), BIC(fit_4), BIC(fit_5)))
df2
RMSE <- rep(0, 11)
for (i in 1:11){s
gam_fit <- gam(accel ~ s(time, k = i+30), data = df)
RMSE[i] <- mean(gam_fit$residuals^2)
}
plot(30:40, RMSE, type = "o", xlab = "k", ylab = "RMSE")
abline(v = 30 + which.min(RMSE) - 1, col = "red")
library(MASS)
library(mgcv)
data(mcycle)
# If we don't do this mcycle is a closure
df <- as.data.frame(matrix(c(mcycle$accel, mcycle$time), ncol = 2))
names(df) <- c("accel", "time")
plot(df$time, df$accel)
RMSE <- rep(0, 11)
for (i in 1:11){s
gam_fit <- gam(accel ~ s(time, k = i+30), data = df)
RMSE[i] <- mean(gam_fit$residuals^2)
}
plot(30:40, RMSE, type = "o", xlab = "k", ylab = "RMSE")
abline(v = 30 + which.min(RMSE) - 1, col = "red")
RMSE <- rep(0, 11)
for (i in 1:11){
gam_fit <- gam(accel ~ s(time, k = i+30), data = df)
RMSE[i] <- mean(gam_fit$residuals^2)
}
plot(30:40, RMSE, type = "o", xlab = "k", ylab = "RMSE")
abline(v = 30 + which.min(RMSE) - 1, col = "red")
RMSE <- rep(0, 11)
for (i in seq(31, 41)){
gam_fit <- gam(accel ~ s(time, k = i), data = df)
RMSE[i] <- mean(gam_fit$residuals^2)
}
plot(30:40, RMSE, type = "o", xlab = "k", ylab = "RMSE")
RMSE <- rep(0, 11)
for (i in seq(30, 40)){
gam_fit <- gam(accel ~ s(time, k = i), data = df)
RMSE[i] <- mean(gam_fit$residuals^2)
}
plot(30:40, RMSE, type = "o", xlab = "k", ylab = "RMSE")
RMSE <- rep(0, 11)
for (i in seq(30, 40)){
gam_fit <- gam(accel ~ s(time, k = i), data = df)
RMSE[i] <- mean(gam_fit$residuals^2)
}
plot(30:41, RMSE, type = "o", xlab = "k", ylab = "RMSE")
length(seq(30, 41))
length(30:41)
RMSE <- rep(0, 11)
for (i in seq(30, 41)){
gam_fit <- gam(accel ~ s(time, k = i), data = df)
RMSE[i] <- mean(gam_fit$residuals^2)
}
plot(30:41, RMSE, type = "o", xlab = "k", ylab = "RMSE")
RMSE <- rep(0, 12)
for (i in seq(30, 41)){
gam_fit <- gam(accel ~ s(time, k = i), data = df)
RMSE[i] <- mean(gam_fit$residuals^2)
}
plot(30:41, RMSE, type = "o", xlab = "k", ylab = "RMSE")
RMSE <- rep(0, 12)
for (i in seq(30, 41)){
gam_fit <- gam(accel ~ s(time, k = i), data = df)
RMSE[i-29] <- mean(gam_fit$residuals^2)
}
plot(30:41, RMSE, type = "o", xlab = "k", ylab = "RMSE")
abline(v = 30 + which.min(RMSE) - 1, col = "red")
RMSE <- rep(0, 12)
for (i in seq(30, 41)){
gam_fit <- gam(accel ~ s(time, i), data = df)
RMSE[i-29] <- mean(gam_fit$residuals^2)
}
RMSE <- rep(0, 12)
for (i in seq(30, 41)){
gam_fit <- gam(accel ~ s(time, k = i), data = df)
RMSE[i-29] <- mean(gam_fit$residuals^2)
}
plot(30:41, RMSE, type = "o", xlab = "k", ylab = "RMSE")
abline(v = 30 + which.min(RMSE) - 1, col = "red")
library(MASS)
library(mgcv)
data(mcycle)
# If we don't do this mcycle is a closure
df <- as.data.frame(matrix(c(mcycle$accel, mcycle$time), ncol = 2))
names(df) <- c("accel", "time")
RMSE <- rep(0, 12)
for (i in seq(30, 41)){
gam_fit <- gam(accel ~ s(time, k = i), data = df)
RMSE[i-29] <- mean(gam_fit$residuals^2)
}
plot(30:41, RMSE, type = "o", xlab = "k", ylab = "RMSE")
abline(v = 30 + which.min(RMSE) - 1, col = "red")
rm(list=ls())
library(MASS)
library(mgcv)
data(mcycle)
# If we don't do this mcycle is a closure
df <- as.data.frame(matrix(c(mcycle$accel, mcycle$time), ncol = 2))
names(df) <- c("accel", "time")
rm(list=ls())
library(rpart) #for fitting decision trees
library(rpart.plot) #for plotting decision trees
install.packages("rpart.plot")
library(rpart) #for fitting decision trees
library(rpart.plot) #for plotting decision trees
library(rpart) #for fitting decision trees
library(rpart.plot) #for plotting decision trees
crabs <- read.csv("crabs.csv")
setwd("C:/Users/stefa/Downloads/Università/Materie/Magistrale/Anno 1/Semestre 1/Statistical Methods/Homework4")
crabs <- read.csv("crabs.csv")
crabs <- read.csv("crabs.txt")
crabs
crabs <- read.csv("crabs.txt", sep="\t", header=TRUE)
crabs
crabs <- read.csv("crabs.txt", sep=" ", header=TRUE)
crabs
crabs <- read.csv("crabs.txt", sep="  ", header=TRUE)
crabs
crab <- read.table("crabs.txt", header = TRUE)
crab
tree <- rpart(sat ~ ., data=crab)
printcp(tree)
prp(tree,
faclen=0, #use full names for factor labels
extra=1, #display number of obs. for each terminal node
roundint=F, #don't round to integers in output
digits=5) #display 5 decimal places in output
tree$cptable
tree$cptable[0]
tree$cptable[1]
tree$cptable[1, "CP"]
tree$cptable[which.min(tree$cptable[,"xerror"]),"CP"]
pruned_tree <- prune(tree, cp=tree$cptable[1, "CP"])
prp(pruned_tree,
faclen=0, #use full names for factor labels
extra=1, #display number of obs. for each terminal node
roundint=F, #don't round to integers in output
digits=5) #display 5 decimal places in output
pruned_tree <- prune(tree, cp=tree$cptable[2, "CP"])
prp(pruned_tree,
faclen=0, #use full names for factor labels
extra=1, #display number of obs. for each terminal node
roundint=F, #don't round to integers in output
digits=5) #display 5 decimal places in output
crab
crab <- read.table("crabs.txt", header = TRUE)
tree <- rpart(y ~ ., data=crab)
pruned_tree <- prune(tree, cp=tree$cptable[2, "CP"])
prp(pruned_tree,
faclen=0, #use full names for factor labels
extra=1, #display number of obs. for each terminal node
roundint=F, #don't round to integers in output
digits=5) #display 5 decimal places in output
crab
tree <- rpart(y ~ . - sat, data=crab)
crab <- read.table("crabs.txt", header = TRUE)
tree <- rpart(y ~ . - sat, data=crab)
pruned_tree <- prune(tree, cp=tree$cptable[2, "CP"])
prp(pruned_tree,
faclen=0, #use full names for factor labels
extra=1, #display number of obs. for each terminal node
roundint=F, #don't round to integers in output
digits=5) #display 5 decimal places in output
rpart.plot(pruned_tree,
faclen=0, #use full names for factor labels
extra=1, #display number of obs. for each terminal node
roundint=F, #don't round to integers in output
digits=5) #display 5 decimal places in output
pruned_tree <- prune(tree, cp=tree$cptable[2, "CP"])
rpart.plot(pruned_tree,
faclen=0, #use full names for factor labels
extra=1, #display number of obs. for each terminal node
roundint=F, #don't round to integers in output
digits=5) #display 5 decimal places in output
plotcp(pruned_tree)
rpart.plot(pruned_tree, extra=1, digits=4, box.palette="auto")
pruned_tree <- prune(tree, cp=tree$cptable[2, "CP"])
rpart.plot(pruned_tree, extra=1, digits=4, box.palette="auto")
```{r}
pruned_tree <- prune(tree, cp=tree$cptable[2, "CP"])
rpart.plot(pruned_tree, extra=1, digits=4, box.palette="auto")
0.8105*95
predict(pruned_tree, crab, type="class")
predict(pruned_tree, crab)
predict(pruned_tree, crab) > 0.5
predict(pruned_tree, crab, type="class")
predict(pruned_tree, crab)
predict(pruned_tree, crab) > 0.5
crab$y - predict(pruned_tree, crab) > 0.5
crab$y != predict(pruned_tree, crab) > 0.5
crab$y != (predict(pruned_tree, crab) > 0.5)
crab$y == (predict(pruned_tree, crab) > 0.5)
mean(crab$y == (predict(pruned_tree, crab) > 0.5))
rpart.plot(tree, extra=1, digits=4, box.palette="auto")
pruned_tree <- prune(tree, cp=tree$cptable[4, "CP"])
rpart.plot(pruned_tree, extra=1, digits=4, box.palette="auto")
fit <- rpart(y ~ weight + width + color + spine, method="class", data=Crabs
fit <- rpart(y ~ weight + width + color + spine, method="class", data=crab)
fit <- rpart(y ~ weight + width + color + spine, method="class", data=crab)
rpart.plot(fit, extra=1, digits=4, box.palette="auto")
fit <- rpart(y ~ weight + width + color + spine, method="class", data=crab)
pruned_fit <- prune(tree, cp=tree$cptable[3, "CP"])
rpart.plot(fit, extra=1, digits=4, box.palette="auto")
fit <- rpart(y ~ weight + width + color + spine, method="class", data=crab)
pruned_fit <- prune(fit, cp=fit$cptable[3, "CP"])
rpart.plot(fit, extra=1, digits=4, box.palette="auto")
rpart.plot(pruned_fit, extra=1, digits=4, box.palette="auto")
fit <- rpart(y ~ weight + width + color + spine, method="class", data=crab)
pruned_fit <- prune(fit, cp=fit$cptable[4, "CP"])
rpart.plot(pruned_fit, extra=1, digits=4, box.palette="auto")
mean(crab$y == (predict(pruned_fit, crab) > 0.5))
mean(crab$y == (predict(pruned_tree, crab) > 0.5))
mean(crab$y == (predict(pruned_fit, crab) > 0.5))
predict(pruned_tree, crab, method="class")
predict(pruned_fit, crab, method="class")
mean(crab$y == (predict(pruned_tree, crab) > 0.5))
mean(crab$y == (predict(pruned_fit, crab) > 0.5))
